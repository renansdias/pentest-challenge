#!/bin/bash

all_vars=true

if [[ -z "$TERRAFORM_STATE_BUCKET_NAME" ]]; then
	echo 'Please specify the bucket name for the terraform state file using the TERRAFORM_STATE_BUCKET_NAME variable)'
    all_vars=false
fi

if [[ -z "$WORKSTATION_IP" ]]; then
	echo "Please specify your workstation's public IP address using the WORKSTATION_IP variable"
    all_vars=false
fi

if [[ "$all_vars" = false ]]; then
    echo 'Exiting...'
    exit 1
fi

attacker_pk_path='attacker'
ssl_cert_path='ssl-bundle.crt'
ssl_cert_pk_path='private.key'

# Generates the SSH key pair to be used to log into the attacker machine
ssh-keygen -b 2048 -t rsa -f ./${attacker_pk_path} -q -N ""

# Generates a self-signed SSL certificate
openssl req \
    -x509 \
    -nodes \
    -days 365 \
    -newkey rsa:2048 \
    -subj '/CN=dojo.slalomdev.io/O=Slalom/C=CA' \
    -keyout ${ssl_cert_pk_path} \
    -out ${ssl_cert_path}

# Uses terraform to launch the base infrastructure
terraform init -backend-config="bucket=$TERRAFORM_STATE_BUCKET_NAME"
terraform apply \
    -auto-approve \
    -var "public_key_path=${attacker_pk_path}.pub" \
    -var "workstation_ip=$WORKSTATION_IP"

if [[ "$?" -gt 0 ]]; then
    echo ""
    echo "Something went wrong with Terraform. Take a look at the error above."
    exit $?
fi

# Waits until SSH is available
echo ""
echo "Waiting for SSH to be available..."
echo ""
sleep 60

# Sets up the attacker script
terraform output attacker_user_data > request

# Copies to and configures the request service in attacker machines
attacker_ips=`terraform output attacker_eip | tr '\r\n' '#' | sed 's/#//g'`
IFS=,
arr=($attacker_ips)
for i in "${!arr[@]}"; do
    scp -i ./${attacker_pk_path} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o PreferredAuthentications=publickey request ec2-user@${arr[$i]}:~/
    ssh -i ./${attacker_pk_path} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o PreferredAuthentications=publickey ec2-user@${arr[$i]} "chmod +x ~/request"
    ssh -i ./${attacker_pk_path} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o PreferredAuthentications=publickey ec2-user@${arr[$i]} "sudo mv ~/request /usr/bin"
    scp -i ./${attacker_pk_path} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o PreferredAuthentications=publickey request.service ec2-user@${arr[$i]}:~/
    ssh -i ./${attacker_pk_path} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o PreferredAuthentications=publickey ec2-user@${arr[$i]} "sudo mv ~/request.service /etc/systemd/system"
    ssh -i ./${attacker_pk_path} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o PreferredAuthentications=publickey ec2-user@${arr[$i]} "sudo systemctl enable request"
    ssh -i ./${attacker_pk_path} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o PreferredAuthentications=publickey ec2-user@${arr[$i]} "sudo systemctl start request"
done

# Copies SSL cert and private key to Target machine and restarts nginx
target_eip=`terraform output target_eip | tr '\r\n' '#' | sed 's/#//g'`
scp -i ./${attacker_pk_path} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o PreferredAuthentications=publickey ${ssl_cert_pk_path} ubuntu@${target_eip}:~/
scp -i ./${attacker_pk_path} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o PreferredAuthentications=publickey ${ssl_cert_path} ubuntu@${target_eip}:~/
ssh -i ./${attacker_pk_path} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o PreferredAuthentications=publickey ubuntu@${target_eip} "sudo mkdir -p /etc/letsencrypt/live/dojo.slalomdev.io/"
ssh -i ./${attacker_pk_path} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o PreferredAuthentications=publickey ubuntu@${target_eip} "sudo mv *.crt *.key /etc/letsencrypt/live/dojo.slalomdev.io/"
ssh -i ./${attacker_pk_path} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o PreferredAuthentications=publickey ubuntu@${target_eip} "sudo service nginx restart"

echo ""
echo "*****************************************************"
echo "Attacker machine IP address(es)"
echo ""
for i in "${!arr[@]}"; do
    echo "${arr[$i]}"
done
echo ""
echo "-----------------------------------------------------"
echo ""
echo "Target machine IP address"
echo ""
echo "${target_eip}"
echo ""
echo "-----------------------------------------------------"
echo ""
echo "Here is the Private Key you will use to SSH into"
echo "both Target and Attacker servers:"
echo ""
cat ./${attacker_pk_path}
echo ""
echo "Save this private key in a file in your local machine"
echo "for later use."
echo "*****************************************************"